const fs = require('fs');
const path = require('path');
const { createFilter } = require('rollup-pluginutils');
const { gettextToI18next } = require('i18next-conv');

/**
 * @typedef {Object} TranslationAsset
 * @property {string} asset The asset id generated by rollup
 * @property {Object} data The merged translations for given language and namespace
 */

/**
 * Bundle and covert .po files into i18next compatible JSON.
 * @param {Object} options Options for the rollup plugin.
 * @return {Object} The rollup plugin instance.
 */
module.exports = function po(opts = {}) {
    const filter = createFilter(opts.include || ['**/*.po'], opts.exclude);

    const plugin = {
        name: 'po',

        buildStart() {
            // create the translations map
            this.translations = {};
        },

        async load(id) {
            if (!filter(id)) {
                // ignore non .po files
                return null;
            }

            // get the language directory name
            let lang = path.basename(path.dirname(id));

            // generate an id for the translation using language and namespace
            let translationId = path.join(
                lang,
                path.basename(id, '.po')
            );

            /**
             * Translation asset data.
             * @type {TranslationAsset}
             */
            let translation = this.translations[translationId] = this.translations[translationId] || {
                asset: this.emitAsset(`${translationId}.json`),
                data: {},
            };

            // convert .po file into JSON
            let json = await gettextToI18next(lang, fs.readFileSync(id));

            // merge with previous data
            translation.data = Object.assign({}, translation.data, JSON.parse(json));

            // just export the asset url
            return `export default import.meta.ROLLUP_ASSET_URL_${translation.asset};`;
        },

        buildEnd() {
            // once all translations are collected, save them to assets
            for (let translationId in this.translations) {
                let translation = this.translations[translationId];
                this.setAssetSource(translation.asset, JSON.stringify(translation.data));
            }
        },
    };

    return plugin;
};
